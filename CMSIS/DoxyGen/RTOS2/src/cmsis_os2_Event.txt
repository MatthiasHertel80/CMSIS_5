

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
//  ==== Event Flag Management ====
/** 
\addtogroup CMSIS_RTOS_EventFlags Event Flag Objects
\ingroup CMSIS_RTOS
\brief Synchronize threads using flags.
\details 
\todo add details here.
@{
*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\typedef osEventFlagsId_t 
\details
 
*/ 
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\struct osEventFlagsAttr_t 
\details
 
*/ 
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr)
\details

*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn int32_t osEventFlagsSet (osEventFlagsId_t ef_id, int32_t flags)
\details

*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn int32_t osEventFlagsClear (osEventFlagsId_t ef_id, int32_t flags)
\details

*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn int32_t osEventFlagsGet (osEventFlagsId_t ef_id)
\details

*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn int32_t osEventFlagsWait (osEventFlagsId_t ef_id, int32_t flags, uint32_t options, uint32_t millisec)
\details

*/
/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\fn osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id)
\details

*/
/// @}

// these struct members must stay outside the group to avoid double entries in documentation
/**
\var osEventFlagsAttr_t::attr_bits
\details
No attributes available.

\var osEventFlagsAttr_t::cb_mem
\details
Pointer to a memory location for the event object. This can optionally be used for custom memory management systems. 
Specify \token{NULL} to use the kernel memory management.


\var osEventFlagsAttr_t::cb_size
\details
The size of the memory block passed with \ref cb_mem. Must be the size of an event object or larger.

\var osEventFlagsAttr_t::name
\details
String with a human readable name of the event object.

*/
